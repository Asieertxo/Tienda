{"ast":null,"code":"import { isContentEditable } from \"@testing-library/user-event/dist/utils\";\nexport const TYPES = {\n  add: \"add\",\n  remove: \"remove\",\n  clear: \"clear\"\n};\nexport function reducerCart(state, action) {\n  switch (action.type) {\n    case TYPES.add:\n      {\n        let incart = false;\n        state.map(function (item) {\n          if (item.ObjectID == action.payload.ObjectID) {\n            incart = true;\n            return incart;\n          }\n        });\n\n        if (incart == false) {\n          return [...state.cart, action.payload];\n        } else {\n          return [...state.cart];\n        }\n      }\n\n    case TYPES.remove:\n      {}\n\n    case TYPES.clear:\n      {}\n\n    default:\n      return state;\n  }\n}\nexport const initialState = [];","map":{"version":3,"sources":["/home/oem/projects/Tienda/src/reducers/cartReducer.js"],"names":["isContentEditable","TYPES","add","remove","clear","reducerCart","state","action","type","incart","map","item","ObjectID","payload","cart","initialState"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,wCAAlC;AAEA,OAAO,MAAMC,KAAK,GAAG;AACnBC,EAAAA,GAAG,EAAK,KADW;AAEnBC,EAAAA,MAAM,EAAE,QAFW;AAGnBC,EAAAA,KAAK,EAAG;AAHW,CAAd;AAMP,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA2BC,MAA3B,EAAkC;AAEvC,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKP,KAAK,CAACC,GAAX;AAAe;AACb,YAAIO,MAAM,GAAG,KAAb;AACAH,QAAAA,KAAK,CAACI,GAAN,CAAU,UAAUC,IAAV,EAAe;AACvB,cAAGA,IAAI,CAACC,QAAL,IAAiBL,MAAM,CAACM,OAAP,CAAeD,QAAnC,EAA4C;AAC1CH,YAAAA,MAAM,GAAG,IAAT;AACA,mBAAOA,MAAP;AACD;AACF,SALD;;AAMA,YAAGA,MAAM,IAAI,KAAb,EAAmB;AACjB,iBAAO,CAAC,GAAGH,KAAK,CAACQ,IAAV,EAAgBP,MAAM,CAACM,OAAvB,CAAP;AACD,SAFD,MAEK;AACH,iBAAO,CAAC,GAAGP,KAAK,CAACQ,IAAV,CAAP;AACD;AACF;;AAGD,SAAKb,KAAK,CAACE,MAAX;AAAkB,OAEjB;;AACD,SAAKF,KAAK,CAACG,KAAX;AAAiB,OAEhB;;AACD;AACE,aAAOE,KAAP;AAxBJ;AA0BD;AAED,OAAO,MAAMS,YAAY,GAAG,EAArB","sourcesContent":["import { isContentEditable } from \"@testing-library/user-event/dist/utils\";\n\nexport const TYPES = {\n  add:    \"add\",\n  remove: \"remove\",\n  clear:  \"clear\",\n};\n\nexport function reducerCart(state,action){\n\n  switch(action.type){\n    case TYPES.add:{\n      let incart = false\n      state.map(function (item){\n        if(item.ObjectID == action.payload.ObjectID){\n          incart = true\n          return incart      \n        }\n      })\n      if(incart == false){\n        return [...state.cart, action.payload]\n      }else{\n        return [...state.cart]\n      }\n    }\n\n\n    case TYPES.remove:{\n\n    }\n    case TYPES.clear:{\n\n    }\n    default:\n      return state;\n  }\n}\n\nexport const initialState = [];"]},"metadata":{},"sourceType":"module"}